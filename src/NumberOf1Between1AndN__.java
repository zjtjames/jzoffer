/**
 * created by Zheng Jiateng on 2019/3/8.
 */

/**
 * 整数中1出现的次数（从1到n整数中1出现的次数）
 * 1~13中包含1的数字有1、10、11、12、13因此共出现6次
 * 思路：设N = abcde ,其中abcde分别为十进制中各位上的数字。
 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
 ① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：
 100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
 ② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：
 100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。
 但同时它还受低位影响，百位出现1的情况是：12100~12113,一共14个，等于低位数字（13）+1。
 ③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：
 100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。
 */
public class NumberOf1Between1AndN__ {
    public int NumberOf1Between1AndN(int n) {
        int count = 0; // 1的个数
        for (int i = 1; i <= n; i *= 10) {
            int current = (n / i) % 10; // 注意这里要除以10
            int before = n / (i * 10);
            int after = n % i;
            if (current == 0) { // 完全没有最后i个
                count += before * i;
            } else if (current == 1) { // 不完全有最后i个
                count += before * i + after + 1;
            } else { // 完全有最后i个
                count += (before + 1) * i;
            }
        }
        return count;
    }
}
